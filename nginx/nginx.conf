# 这里测试nginx开启压缩功能时的各个参数对性能有何影响
# 针对非静态资源和静态资源分布做测试：
# 	例如对reponse的内容进行压缩，对所有静态资源进行压缩

# /etc/nginx/nginx.conf

# Change user from nginx to root
# user nginx;
user nginx;

# Set number of worker processes automatically based on number of CPU cores.
worker_processes auto;

# Enables the use of JIT for regular expressions to speed-up their processing.
pcre_jit on;

# Configures default error logger.
error_log /var/log/nginx/error.log warn;

# Includes files with directives to load dynamic modules.
include /etc/nginx/modules/*.conf;

# IN docker must use daemon off.
# daemon off;
# pid /h/ome/docker/nginx.pid;
# 这里修改位置
pid        /var/run/nginx.pid;

#一个nginx 进程打开的最多文件描述符数目，理论值应该是最多打开文件数（ulimit -n）与nginx 进程数相除，但是nginx 分配请求并不是那么均匀，所以最好与ulimit -n 的值保持一致
worker_rlimit_nofile 60000;

events {
	# The maximum number of simultaneous connections that can be opened by
	# a worker process.
	worker_connections 10240;
}

http {
	# Includes mapping of file name extensions to MIME types of responses
	# and defines the default type.
	include /etc/nginx/mime.types;
	default_type application/octet-stream;

	# Name servers used to resolve names of upstream servers into addresses.
	# It's also needed when using tcpsocket and udpsocket in Lua modules.

	# Don't tell nginx version to clients.
	server_tokens off;

	# Specifies the maximum accepted body size of a client request, as
	# indicated by the request header Content-Length. If the stated content
	# length is greater than this size, then the client receives the HTTP
	# error code 413. Set to 0 to disable.
	# client_max_body_size 50m;

	# Timeout for keep-alive connections. Server will close connections after
	# this time.
	keepalive_timeout 65;

	# Sendfile copies data between one FD and other from within the kernel,
	# which is more efficient than read() + write().
	sendfile on;

	# Don't buffer data-sends (disable Nagle algorithm).
	# Good for sending frequent small bursts of data in real time.
	tcp_nodelay on;

	# Causes nginx to attempt to send its HTTP response head in one packet,
	# instead of using partial frames.
	#tcp_nopush on;

	# Path of the file with Diffie-Hellman parameters for EDH ciphers.
	#ssl_dhparam /etc/ssl/nginx/dh2048.pem;

	# Specifies that our cipher suits should be preferred over client ciphers.
	ssl_prefer_server_ciphers on;

	# Enables a shared SSL cache with size that can hold around 8000 sessions.
	ssl_session_cache shared:SSL:2m;

	# https://www.cnblogs.com/zfying/archive/2012/07/07/2580876.html
	# https://www.jianshu.com/p/22a236def734
	# Enable gzipping of responses.
	gzip on;

	# 小于1k的不进行压缩，改值从header中的content-length获取，default value is 0，表示一律对页面进行压缩
	# 这个值一定要设置，否则开始 gzip on 后，1k的文件可能会越压缩越大
	gzip_min_length 1k;

	# 设置系统获取几个单位的缓存用于存储gzip的压缩结果数据流。4 16k代表以16k为单位，安装原始数据大小以16k为单位的4倍申请内存。
	gzip_buffers 4 16k;

	# 识别http的协议版本(1.0/1.1), # invalid number of arguments
	# 注意proxy的版本会影响http协议版本，如果proxy是1.0
	# 可以在proxy是指定header加入1.1 或者 在这里配置 1.0 或者更新proxy的nignx到1.14等
	gzip_http_version 1.0;

	# gzip压缩比，1压缩比最小处理速度最快，9压缩比最大但处理速度最慢(传输快但比较消耗cpu)
	# 服务器cpu有的是，使用到30%-35%都ok，另一部分给短信发送预留
	# 逐步扩大查看传输时间，压缩率，和cpu消耗
    # 建议2-6
    # 相对于上一个压缩级别，2的压缩比是最高的
    # gzip_comp_level 1;
	gzip_comp_level 2;
    # gzip_comp_level 3;
	# gzip_comp_level 4;
	# gzip_comp_level 5;
	# gzip_comp_level 6;
	# gzip_comp_level 7;
	# gzip_comp_level 8;
	# gzip_comp_level 9;

	# 匹配mime类型进行压缩，无论是否指定,”text/html”类型总是会被压缩的。
	# gzip_types text/plain application/x-javascript text/css application/xml
    gzip_types  text/plain text/css text/js text/xml text/javascript application/javascript application/x-javascript application/json application/xml application/rss+xml image/svg+xml;

    # Set the Vary HTTP header as defined in the RFC 2616.
	# 和http头有关系，加个vary头，给代理服务器用的，有的浏览器支持压缩，有的不支持，所以避免浪费不支持的也压缩，所以根据客户端的HTTP头来判断，是否需要压缩
	gzip_vary on;

	# Enable checking the existence of precompressed files.
	# 需要在静态资源请求上使用，不要全局配置
	# nginx就会先查找 stylesheets/homepage.css.gz 这个文件，如果存在直接把它发送出去，如果不存在，
	# 再将stylesheets/homepage.css文件进行gzip压缩，再发送出去，这样可以避免重复的压缩无谓的消耗资源，
	# 这个模块不受gzip_types限制，会对所有请求有效。所以建议不要在全局上使用，因为一般来说大部分都是动态请求，
	# 是不会有.gz这个文件的，建议只在局部我们确认有.gz的目录中使用。
	# Nginx不会自动的将压缩结果写入文件系统，这点不同于lighttpd，所以如果想使用static_gzip模块，需要自己写脚本生成.gz文件。
	# gzip_static on;

	# Specifies the main log format.
	# 增加记录

	# https://www.cnblogs.com/thatsit/p/7078210.html
	# $upstream_connect_time
	# keeps time spent on establishing a connection with the upstream server (1.9.1); the time is kept in seconds with millisecond resolution.
	# In case of SSL, includes time spent on handshake. Times of several connections are separated by commas and colons like addresses in the $upstream_addr variable.
	# $upstream_response_time:
	# 	keeps time spent on receiving the response from the upstream server; the time is kept in seconds with millisecond resolution.
	#	Times of several responses are separated by commas and colons like addresses in the $upstream_addr variable.
	# $upstream_header_time:
	# 	keeps time spent on receiving the response header from the upstream server (1.7.10); the time is kept in seconds with
	#	millisecond resolution. Times of several responses are separated by commas and colons like addresses in the $upstream_addr variable.
	log_format main '$remote_addr - $remote_user [$time_local] "$request" '
			'$status $body_bytes_sent "$http_referer" '
			'"$http_user_agent" "$http_x_forwarded_for" '
			'$request_time $upstream_connect_time $upstream_response_time $upstream_header_time';

	# Sets the path, format, and configuration for a buffered log write.
	access_log /var/log/nginx/access_new.log main;


	# Includes virtual hosts configs.
	include /etc/nginx/conf.d/*.conf;
	# include /etc/nginx/sites-available/*;
}